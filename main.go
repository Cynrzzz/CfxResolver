package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"time"
)

type AutoGenerated struct {
	EndPoint string `json:"EndPoint"`
	Data     struct {
		Clients             int      `json:"clients"`
		Gametype            string   `json:"gametype"`
		Hostname            string   `json:"hostname"`
		Mapname             string   `json:"mapname"`
		SvMaxclients        int      `json:"sv_maxclients"`
		EnhancedHostSupport bool     `json:"enhancedHostSupport"`
		RequestSteamTicket  string   `json:"requestSteamTicket"`
		Resources           []string `json:"resources"`
		Server              string   `json:"server"`
		Vars                struct {
			Boutique              string `json:"Boutique"`
			Discord               string `json:"Discord"`
			ActivitypubFeed       string `json:"activitypubFeed"`
			BannerConnecting      string `json:"banner_connecting"`
			BannerDetail          string `json:"banner_detail"`
			Gamename              string `json:"gamename"`
			Locale                string `json:"locale"`
			OnesyncEnabled        string `json:"onesync_enabled"`
			SvEnforceGameBuild    string `json:"sv_enforceGameBuild"`
			SvEnhancedHostSupport string `json:"sv_enhancedHostSupport"`
			SvLan                 string `json:"sv_lan"`
			SvLicenseKeyToken     string `json:"sv_licenseKeyToken"`
			SvMaxClients          string `json:"sv_maxClients"`
			SvProjectDesc         string `json:"sv_projectDesc"`
			SvProjectName         string `json:"sv_projectName"`
			SvPureLevel           string `json:"sv_pureLevel"`
			SvScriptHookAllowed   string `json:"sv_scriptHookAllowed"`
			Tags                  string `json:"tags"`
			Premium               string `json:"premium"`
		} `json:"vars"`
		SelfReportedClients int `json:"selfReportedClients"`
		Players             []struct {
			Endpoint    string   `json:"endpoint"`
			ID          int      `json:"id"`
			Identifiers []string `json:"identifiers"`
			Name        string   `json:"name"`
			Ping        int      `json:"ping"`
		} `json:"players"`
		OwnerID          int       `json:"ownerID"`
		Private          bool      `json:"private"`
		Fallback         bool      `json:"fallback"`
		ConnectEndPoints []string  `json:"connectEndPoints"`
		UpvotePower      int       `json:"upvotePower"`
		BurstPower       int       `json:"burstPower"`
		SupportStatus    string    `json:"support_status"`
		OwnerName        string    `json:"ownerName"`
		OwnerProfile     string    `json:"ownerProfile"`
		OwnerAvatar      string    `json:"ownerAvatar"`
		LastSeen         time.Time `json:"lastSeen"`
		IconVersion      int       `json:"iconVersion"`
	} `json:"Data"`
}

func main() {
	var cfxCode string

	fmt.Printf("Enter Cfx: ")
	fmt.Scanln(&cfxCode)

	resp, err := http.Get("https://servers-frontend.fivem.net/api/servers/single/" + cfxCode)
	if err != nil {
		log.Println(err)
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Println(err)
	}

	var A AutoGenerated
	err = json.Unmarshal([]byte(body), &A)

	if resp.StatusCode != 200 {
		log.Println("Error: Invalid Cfx Code!")
	} else {
		log.Printf("IP: %s\r\n", A.Data.ConnectEndPoints)
	}
}
